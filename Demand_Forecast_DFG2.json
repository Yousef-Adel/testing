{"name":"Demand_Forecast_DFG2","ppdf:dataflowId":"45ed8746-b7d7-44bc-abc3-e2ce4a0180e6","ppdf:owner":{"tenantId":"9192e46f-bdc1-4c5e-85ff-a6b4b78d17fe","userId":"8ffb6308-062f-4344-ae64-e3471c093bdf"},"ppdf:fastCopy":false,"version":"1.0","culture":"en-US","modifiedTime":"2023-07-25T13:57:41.3284988+00:00","ppdf:outputFileFormat":"Parquet","pbi:mashup":{"fastCombine":true,"allowNativeQueries":false,"queriesMetadata":{"Walk-in Visits":{"queryId":"545aa3f1-6e54-4823-a6b0-317549cb241c","queryName":"Walk-in Visits","loadEnabled":true},"Manual Walk-In":{"queryId":"c2e1568a-b0b8-4041-aeca-fe8edb0d5043","queryName":"Manual Walk-In","loadEnabled":true},"OrderMode":{"queryId":"8a1e174f-35c6-4171-a335-939368c8fabf","queryName":"OrderMode","loadEnabled":true},"cfgCategoryByStore":{"queryId":"2ea29e31-e03e-49f7-a3a2-dfb8a586f806","queryName":"cfgCategoryByStore","loadEnabled":true},"DestinationForWriteToDatabaseTableFrom_Walk-in Visits":{"queryId":"c3201452-95d2-4273-be01-109ca23014eb","queryName":"DestinationForWriteToDatabaseTableFrom_Walk-in Visits"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Walk-in Visits":{"queryId":"db0b3239-264c-4881-8c05-d176954e2cb1","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Walk-in Visits"},"TransformForOutputToDatabaseTableFrom_Walk-in Visits":{"queryId":"e9aeca5e-a794-438d-8d1e-c6c3d9d21ded","queryName":"TransformForOutputToDatabaseTableFrom_Walk-in Visits"},"DefaultModelStorage":{"queryId":"d80930e7-6ca2-490e-b025-3c5fc9e5c53e","queryName":"DefaultModelStorage"},"Weather_query":{"queryId":"2d93decb-82d4-4d87-8e06-b6bd5778ae3d","queryName":"Weather_query","loadEnabled":true},"NavigationQuery":{"queryId":"3fb34188-f8f3-4385-9fa0-c19552e4e377","queryName":"NavigationQuery","loadEnabled":true},"dpvHstGndItem":{"queryId":"7a9cfc01-d840-45eb-9047-5ab49336e7fa","queryName":"dpvHstGndItem","loadEnabled":true},"Sales NCR Walk-In":{"queryId":"14d8fd4b-2ca0-4b0d-981a-cd15a66e352a","queryName":"Sales NCR Walk-In","loadEnabled":true},"DestinationForWriteToDatabaseTableFrom_Sales NCR Walk-In":{"queryId":"aed42870-676c-41ff-b2fa-e6e92ed79b52","queryName":"DestinationForWriteToDatabaseTableFrom_Sales NCR Walk-In"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Sales NCR Walk-In":{"queryId":"765a2e8a-a256-468d-a102-5737f7933fe5","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Sales NCR Walk-In"},"TransformForOutputToDatabaseTableFrom_Sales NCR Walk-In":{"queryId":"a6847c7d-6e1a-4b0a-abaa-aeff7e3cb634","queryName":"TransformForOutputToDatabaseTableFrom_Sales NCR Walk-In"},"Category":{"queryId":"875e0671-df6f-4a10-a6e7-24c59773006d","queryName":"Category","loadEnabled":true},"WeatherData":{"queryId":"7af61afd-a3b5-4d96-925f-bad5debb809a","queryName":"WeatherData","loadEnabled":true},"Weather_Historical+API":{"queryId":"b8bf8408-22c9-4cbf-86ca-ef03f9c2f650","queryName":"Weather_Historical+API","loadEnabled":true},"DestinationForWriteToDatabaseTableFrom_Weather_Historical+API":{"queryId":"5b07bac8-1d91-448d-b8b7-37416987df8c","queryName":"DestinationForWriteToDatabaseTableFrom_Weather_Historical+API"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Weather_Historica":{"queryId":"269ca0ba-3db4-458d-9464-3f8bb948b6ed","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Weather_Historica"},"TransformForOutputToDatabaseTableFrom_Weather_Historical+API":{"queryId":"82b5abba-ea57-43fa-9083-fcceaf843bb5","queryName":"TransformForOutputToDatabaseTableFrom_Weather_Historical+API"},"Holidays_2022_2024":{"queryId":"cb61c093-46f3-4c94-acb0-d7d741af9dcb","queryName":"Holidays_2022_2024","loadEnabled":true},"DestinationForWriteToDatabaseTableFrom_Holidays_2022_2024":{"queryId":"6b497813-c848-491c-a25b-f8bd7f9d636f","queryName":"DestinationForWriteToDatabaseTableFrom_Holidays_2022_2024"},"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Holidays_2022_202":{"queryId":"7c35869e-617f-4102-a159-cc11c2b3af06","queryName":"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Holidays_2022_202"},"TransformForOutputToDatabaseTableFrom_Holidays_2022_2024":{"queryId":"eaa4d83f-0dce-402c-be01-e8df6721c7ab","queryName":"TransformForOutputToDatabaseTableFrom_Holidays_2022_2024"}},"document":"section Section1;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared #\"Walk-in Visits\" = let\n  BaseUrl = \"https://api.topgolfoberhausen.com\",\n  Headers = [#\"Access-token\"=\"2389bd04-1415-4d24-bcc3-0fce6f11e331\"],\n  Source = Json.Document(Web.Contents(BaseUrl, \n                                      [RelativePath=\"live/v1/vgs/stats\", \n                                       Headers=Headers])),\n  Table = Table.FromRecords(Source),\n  #\"Changed Type\" = Table.TransformColumnTypes(Table, {{\"date\", type date}, {\"visits_count\", Int64.Type}}),\n  #\"Transform columns\" = Table.TransformColumnTypes(#\"Changed Type\", {{\"playsite_id\", type text}, {\"visit_type\", type text}}),\n  #\"Appended query\" = Table.Combine({#\"Transform columns\", #\"Manual Walk-In\"}),\n  #\"Transform columns 1\" = Table.TransformColumnTypes(#\"Appended query\", {{\"playsite_id\", type text}}),\n  #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns 1\", {{\"playsite_id\", null}}),\n  #\"Filtered rows\" = Table.SelectRows(#\"Replace errors\", each ([visit_type] = \"WALK-IN NEW\" or [visit_type] = \"WALK-IN REPEAT\")),\r\n  #\"Sorted rows\" = Table.Sort(#\"Filtered rows\", {{\"date\", Order.Descending}}),\r\n  #\"Grouped rows\" = Table.Group(#\"Sorted rows\", {\"date\"}, {{\"Visit_Count\", each List.Sum([visits_count]), type nullable number}}),\r\n  #\"Sorted rows 1\" = Table.Sort(#\"Grouped rows\", {{\"date\", Order.Descending}})\nin\n  #\"Sorted rows 1\";\r\nshared #\"Manual Walk-In\" = let\n  Source = Table.FromRows(Json.Document(Binary.Decompress(Binary.FromText(\"i45WMjc1M1LSUTLWNzIAIiMQO9zRx1vX00/BzzUcyLOwNFaK1cGrMMg1wNUxBCgAFEdWa6pvaI7dUGNzC0IK4YYaGpghqzXTNzLDbqilqTkhhXBDjc1RfGWobwRSaozFTDMC6hBGmgL9FAsA\", BinaryEncoding.Base64), Compression.Deflate)), let _t = ((type nullable text) meta [Serialized.Text = true]) in type table [playsite_id = _t, date = _t, visit_type = _t, visits_count = _t]),\n  #\"Changed column type\" = Table.TransformColumnTypes(Source, {{\"date\", type date}, {\"playsite_id\", Int64.Type}, {\"visit_type\", type text}, {\"visits_count\", type number}})\nin\n  #\"Changed column type\";\r\nshared OrderMode = let\n  Source = Sql.Database(\"greenreb.database.windows.net\", \"NcrAlohaInsights\"),\n  Navigation = Source{[Schema = \"dbo\", Item = \"OrderMode\"]}[Data]\nin\n  Navigation;\r\nshared cfgCategoryByStore = let\n  Source = Sql.Database(\"greenreb.database.windows.net\", \"NcrAlohaInsights\"),\n  dbo_cfgCategoryByStore = Source{[Schema = \"dbo\", Item = \"cfgCategoryByStore\"]}[Data],\n  #\"Filtered rows\" = Table.SelectRows(dbo_cfgCategoryByStore, each [FKStoreId] = 10001),\n  #\"Removed Columns\" = Table.RemoveColumns(#\"Filtered rows\", {\"UserNumber\", \"Sales\", \"Retail\", \"eImporterFileGuid\", \"Description\", \"Parent\", \"Suggestive\", \"Tipshare\", \"PMSSalesCat\", \"ARSalesCat\"}),\n  #\"Added Custom\" = Table.AddColumn(#\"Removed Columns\", \"StoreCategoryId\", each Text.Combine({\n    Text.From([FKStoreId]), \"_\", Text.From([CategoryId])\n})),\n  #\"Added Conditional Column\" = Table.TransformColumnTypes(Table.AddColumn(#\"Added Custom\", \"Custom\", each if [Name] = \"\" then null else if [Name] = \"==SALES CATEGORIES==\" then null else if [Name] = \"Topgolf\" then \"TOPGOLF SALES\" else if [Name] = \"Lifetime Memberships\" then \"LIFETIME MEMBERSHIPS SALES\" else if [Name] = \"Retail and Other\" then \"RETAIL AND OTHER SALES\" else if [Name] = \"GAME PLAY\" then \"TOPGOLF SALES\" else if [Name] = \"GAME CREDIT\" then \"TOPGOLF SALES\" else if [Name] = \"LIFETIME MEMBERSHIP\" then \"LIFETIME MEMBERSHIPS SALES\" else if [Name] = \"RETAIL\" then \"RETAIL AND OTHER SALES\" else if [Name] = \"EVENTS Food\" then \"EVENT SALES\" else if [Name] = \"EVENTS Beverages\" then \"EVENT SALES\" else if [Name]=\"Membership\" or [Name]=\"Membership Discount\" then \"LIFETIME MEMBERSHIPS SALES\" else \"F&B SALES\"), {{\"Custom\", type text}}),\n  #\"Renamed Columns\" = Table.RenameColumns(#\"Added Conditional Column\", {{\"Custom\", \"ReportingCategory\"}}),\n  #\"Transform columns\" = Table.TransformColumnTypes(#\"Renamed Columns\", {{\"StoreCategoryId\", type text}}),\n  #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"StoreCategoryId\", null}}),\n  #\"Transform columns 1\" = Table.TransformColumnTypes(#\"Replace errors\", {{\"ReportingCategory\", type text}}),\n  #\"Replace errors 1\" = Table.ReplaceErrorValues(#\"Transform columns 1\", {{\"ReportingCategory\", null}}),\n  #\"Merged queries\" = Table.NestedJoin(#\"Replace errors 1\", {\"CategoryId\"}, Category, {\"CategoryId\"}, \"Category\", JoinKind.LeftOuter),\n  #\"Expanded Category\" = Table.ExpandTableColumn(#\"Merged queries\", \"Category\", {\"Name\"}, {\"Name.1\"}),\n  #\"Added custom 1\" = Table.AddColumn(#\"Expanded Category\", \"Custom\", each if [Name.1] = null then null else if Text.Contains([Name.1], \"FOOD\") then \"FOOD SALES\" else if [Name.1] = \"BEER\" then \"BEVERAGES SALES\" else if [Name.1] = \"WINE\" then \"BEVERAGES SALES\" else if [Name.1] = \"COCKTAILS\" then \"BEVERAGES SALES\" else if Text.Contains([Name.1], \"BEVERAGES\") then \"BEVERAGES SALES\" else if [Name.1] = \"LICOR\" then \"BEVERAGES SALES\" else if Text.Contains([Name.1], \"Beverages\") then \"BEVERAGES SALES\" else if [Name.1] = \"Membership\" then \"LIFETIME MEMBERSHIPS SALES\" else if Text.Contains([Name.1], \"Food\") then \"FOOD SALES\" else if [Name.1] = \"RETAIL\" then \"RETAIL SALES\" else if [Name.1] = \"MISC LOW VAT\" then \"FOOD SALES\" else if [Name.1] = \"MISC HIGH VAT\" then \"BEVERAGES SALES\" else [ReportingCategory]),\n  #\"Renamed columns 1\" = Table.RenameColumns(#\"Added custom 1\", {{\"ReportingCategory\", \"ReportingCategory_1\"}, {\"Custom\", \"ReportingCategory_2\"}}),\n  #\"Transform columns 2\" = Table.TransformColumnTypes(#\"Renamed columns 1\", {{\"ReportingCategory_2\", type text}}),\n  #\"Replace errors 2\" = Table.ReplaceErrorValues(#\"Transform columns 2\", {{\"ReportingCategory_2\", null}})\nin\n  #\"Replace errors 2\";\r\nshared #\"DestinationForWriteToDatabaseTableFrom_Walk-in Visits\" = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"d982fe8c-96a8-4194-be02-47865deebfba\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"724f7534-75f9-4f0d-98b7-45e421c2da7f\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Walk_in_Visits\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[date = nullable date, Visit_Count = nullable number], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared #\"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Walk-in Visits\" = let\r\n  #\"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Walk-in Visits\" = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = #\"DestinationForWriteToDatabaseTableFrom_Walk-in Visits\"], (txn) => {TableAction.InsertRows(txn[Target], #\"TransformForOutputToDatabaseTableFrom_Walk-in Visits\"), Action.DoNothing}))\r\nin\r\n  #\"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Walk-in Visits\";\r\nshared #\"TransformForOutputToDatabaseTableFrom_Walk-in Visits\" = let\r\n    SourceTable = Table.SelectColumns(#\"Walk-in Visits\", {\"date\", \"Visit_Count\"})\r\nin\r\n    SourceTable;\r\nshared DefaultModelStorage = let\r\n  DefaultModelStorage = Pipeline.DefaultModelStorage()\r\nin\r\n  DefaultModelStorage;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared Weather_query = let\n    Source = Json.Document(Web.Contents(\"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/Oberhausen?unitGroup=metric&key=6CS4R3NSDT3QT6S7FL68KHB9T&contentType=json\")),\r\n  Navigation = Source[days],\r\n  #\"Converted to table\" = Table.FromList(Navigation, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\r\n  #\"Expanded Column1\" = Table.ExpandRecordColumn(#\"Converted to table\", \"Column1\", {\"datetime\", \"datetimeEpoch\", \"tempmax\", \"tempmin\", \"temp\", \"feelslikemax\", \"feelslikemin\", \"feelslike\", \"dew\", \"humidity\", \"precip\", \"precipprob\", \"precipcover\", \"preciptype\", \"snow\", \"snowdepth\", \"windgust\", \"windspeed\", \"winddir\", \"pressure\", \"cloudcover\", \"visibility\", \"solarradiation\", \"solarenergy\", \"uvindex\", \"severerisk\", \"sunrise\", \"sunriseEpoch\", \"sunset\", \"sunsetEpoch\", \"moonphase\", \"conditions\", \"description\", \"icon\", \"stations\", \"source\", \"hours\"}, {\"datetime\", \"datetimeEpoch\", \"tempmax\", \"tempmin\", \"temp\", \"feelslikemax\", \"feelslikemin\", \"feelslike\", \"dew\", \"humidity\", \"precip\", \"precipprob\", \"precipcover\", \"preciptype\", \"snow\", \"snowdepth\", \"windgust\", \"windspeed\", \"winddir\", \"pressure\", \"cloudcover\", \"visibility\", \"solarradiation\", \"solarenergy\", \"uvindex\", \"severerisk\", \"sunrise\", \"sunriseEpoch\", \"sunset\", \"sunsetEpoch\", \"moonphase\", \"conditions\", \"description\", \"icon\", \"stations\", \"source\", \"hours\"}),\r\n  #\"Expanded preciptype\" = Table.ExpandListColumn(#\"Expanded Column1\", \"preciptype\"),\r\n  #\"Removed columns\" = Table.RemoveColumns(#\"Expanded preciptype\", {\"datetimeEpoch\", \"tempmax\", \"tempmin\", \"feelslikemax\", \"feelslikemin\", \"feelslike\", \"dew\", \"humidity\", \"precip\", \"icon\", \"stations\", \"source\", \"hours\", \"description\", \"conditions\", \"moonphase\", \"sunsetEpoch\", \"sunset\", \"sunriseEpoch\", \"sunrise\", \"severerisk\", \"uvindex\", \"solarenergy\", \"solarradiation\", \"visibility\", \"cloudcover\", \"pressure\", \"winddir\", \"precipprob\", \"precipcover\", \"snow\", \"snowdepth\", \"windgust\", \"windspeed\"}),\r\n  #\"Replaced value\" = Table.ReplaceValue(#\"Removed columns\", \"\", \"None\", Replacer.ReplaceValue, {\"preciptype\"}),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Replaced value\", {{\"preciptype\", type text}}),\r\n  #\"Replaced value 1\" = Table.ReplaceValue(#\"Changed column type\", null, \"None\", Replacer.ReplaceValue, {\"preciptype\"})\nin\n    #\"Replaced value 1\";\r\n[Staging = \"DefaultModelStorage\"]\r\nshared NavigationQuery = let\r\n  Source = Lakehouse.Contents([]),\r\n  #\"From Value\" = Table.FromValue(Source),\r\n  #\"Remove Columns\" = Table.RemoveColumns(#\"From Value\", Table.ColumnsOfType(#\"From Value\", {type table, type record, type list, type nullable binary, type binary, type function}))\r\nin\r\n  #\"Remove Columns\";\r\n[Staging = \"DefaultModelStorage\"]\r\nshared dpvHstGndItem = let\n  Source = Sql.Database(\"greenreb.database.windows.net\", \"NcrAlohaInsights\"),\n  Navigation = Source{[Schema = \"dbo\", Item = \"dpvHstGndItem\"]}[Data],\n  #\"Filtered rows\" = Table.SelectRows(Navigation, each [FKStoreId] <> 99999),\n  #\"Filtered rows 1\" = Table.SelectRows(#\"Filtered rows\", each [DateOfBusiness] > #datetime(2022, 1, 18, 23, 59, 59)),\n  #\"Inserted conditional column\" = Table.AddColumn(#\"Filtered rows 1\", \"FKCategoryID2\", each if [FKItemId] = 920030 then 50 else [FKCategoryId]),\n  #\"Removed columns\" = Table.RemoveColumns(#\"Inserted conditional column\", {\"FKCategoryId\"}),\n  #\"Renamed columns\" = Table.RenameColumns(#\"Removed columns\", {{\"FKCategoryID2\", \"FKCategoryId\"}}),\n  #\"Added custom 1\" = Table.AddColumn(#\"Renamed columns\", \"TotalPaid\", each ([DiscPric] - [InclTax]) * [Quantity] / \n(if [QuantityUnit] = 0 then 1 else [QuantityUnit])),\n  #\"Removed other columns\" = Table.SelectColumns(#\"Added custom 1\", {\"UniqueID\", \"DateOfBusiness\", \"FKStoreId\", \"FKEmployeeNumber\", \"CheckNumber\", \"FKItemId\", \"FKCategoryId\", \"FKOrderModeId\", \"FKDayPartId\", \"FKRevenueId\", \"FKTerminalId\", \"Quantity\", \"SystemDate\", \"QuantityUnit\", \"TotalPaid\"}),\n  #\"Changed column type 1\" = Table.TransformColumnTypes(#\"Removed other columns\", {{\"DateOfBusiness\", type date}}),\n  #\"Changed column type 2\" = Table.TransformColumnTypes(#\"Changed column type 1\", {{\"TotalPaid\", type number}}),\n  #\"Sorted rows\" = Table.Sort(#\"Changed column type 2\", {{\"CheckNumber\", Order.Ascending}, {\"SystemDate\", Order.Ascending}}),\n  #\"Transform columns\" = Table.TransformColumnTypes(#\"Sorted rows\", {{\"FKCategoryId\", type text}}),\n  #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"FKCategoryId\", null}}),\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Replace errors\", {{\"FKCategoryId\", Int64.Type}})\nin\n  #\"Changed column type\";\r\n[Staging = \"DefaultModelStorage\"]\r\nshared #\"Sales NCR Walk-In\" = let\n  Source = Table.NestedJoin(dpvHstGndItem, {\"FKStoreId\", \"FKCategoryId\"}, cfgCategoryByStore, {\"FKStoreId\", \"CategoryId\"}, \"ncrCategories\", JoinKind.LeftOuter),\n  #\"Expanded ncrCategories\" = Table.ExpandTableColumn(Source, \"ncrCategories\", {\"ReportingCategory_2\"}, {\"ncrCategories.ReportingCategory\"}),\n  #\"Replaced missing order modes\" = Table.ReplaceValue(#\"Expanded ncrCategories\", 99, 1, Replacer.ReplaceValue, {\"FKOrderModeId\"}),\n  #\"Merged Queries\" = Table.NestedJoin(#\"Replaced missing order modes\", {\"FKOrderModeId\"}, OrderMode, {\"OrderModeId\"}, \"OrderMode\", JoinKind.LeftOuter),\n  #\"Expanded OrderMode\" = Table.ExpandTableColumn(#\"Merged Queries\", \"OrderMode\", {\"Name\"}, {\"OrderMode.Name\"}),\n  #\"Filtered rows 1\" = Table.SelectRows(#\"Expanded OrderMode\", each ([FKCategoryId] <> 32)),\n  #\"Renamed Columns1\" = Table.RenameColumns(#\"Filtered rows 1\", {{\"OrderMode.Name\", \"OrderMode\"}}),\n  #\"Reordered Columns\" = Table.ReorderColumns(#\"Renamed Columns1\", {\"UniqueID\", \"FKStoreId\", \"TotalPaid\", \"Quantity\", \"QuantityUnit\", \"DateOfBusiness\", \"FKCategoryId\", \"ncrCategories.ReportingCategory\"}),\n  #\"Renamed Columns\" = Table.RenameColumns(#\"Reordered Columns\", {{\"ncrCategories.ReportingCategory\", \"ReportingCategory\"}}),\n  #\"Added Custom1\" = Table.AddColumn(#\"Renamed Columns\", \"SalesCategory\", each [ReportingCategory]&\" \" &[OrderMode]),\n  #\"Grouped Rows\" = Table.Group(#\"Added Custom1\", {\"FKStoreId\", \"DateOfBusiness\", \"SalesCategory\"}, {{\"TotalAmount\", each List.Sum([TotalPaid]), type number}}),\n  KPIs = Table.RenameColumns(#\"Grouped Rows\", {{\"FKStoreId\", \"ncr_store_id\"}, {\"DateOfBusiness\", \"reporting_day\"}, {\"SalesCategory\", \"kpi\"}, {\"TotalAmount\", \"value\"}}),\n  #\"Grouped Rows1\" = Table.Group(KPIs, {\"ncr_store_id\", \"reporting_day\"}, {{\"value\", each List.Sum([value]), type number}}),\n  #\"Added Custom2\" = Table.AddColumn(#\"Grouped Rows1\", \"kpi\", each \"TOTAL SALES\"),\n  Totals = Table.ReorderColumns(#\"Added Custom2\", {\"ncr_store_id\", \"reporting_day\", \"kpi\", \"value\"}),\n  #\"Merged KPIs with Totals\" = Table.Combine({KPIs, Totals}),\n  #\"Sorted Rows\" = Table.Sort(#\"Merged KPIs with Totals\", {{\"reporting_day\", Order.Descending}}),\n  #\"Added Custom3\" = Table.AddColumn(#\"Sorted Rows\", \"day_of_year\", each Date.DayOfYear([reporting_day])),\n  #\"Reordered Columns1\" = Table.ReorderColumns(#\"Added Custom3\", {\"ncr_store_id\", \"reporting_day\", \"day_of_year\", \"kpi\", \"value\"}),\n  #\"Changed Type1\" = Table.TransformColumnTypes(#\"Reordered Columns1\", {{\"day_of_year\", Int64.Type}}),\n  #\"Transform columns\" = Table.TransformColumnTypes(#\"Changed Type1\", {{\"kpi\", type text}}),\n  #\"Replace errors\" = Table.ReplaceErrorValues(#\"Transform columns\", {{\"kpi\", null}}),\n  #\"Filtered rows\" = Table.SelectRows(#\"Replace errors\", each [kpi] = \"BEVERAGES SALES WALK IN\" or [kpi] = \"FOOD SALES WALK IN\" or [kpi] = \"LIFETIME MEMBERSHIPS SALES WALK IN\" or [kpi] = \"RETAIL SALES WALK IN\" or [kpi] = \"TOPGOLF SALES WALK IN\"),\n  #\"Grouped rows 1\" = Table.Group(#\"Filtered rows\", {\"reporting_day\"}, {{\"Walk-In Sales\", each List.Sum([value]), type nullable number}})\nin\n  #\"Grouped rows 1\";\r\nshared #\"DestinationForWriteToDatabaseTableFrom_Sales NCR Walk-In\" = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"d982fe8c-96a8-4194-be02-47865deebfba\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"724f7534-75f9-4f0d-98b7-45e421c2da7f\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Sales_NCR_Walk_In\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[reporting_day = nullable date, #\"Walk-In_Sales\" = nullable number], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared #\"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Sales NCR Walk-In\" = let\r\n  #\"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Sales NCR Walk-In\" = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = #\"DestinationForWriteToDatabaseTableFrom_Sales NCR Walk-In\"], (txn) => {TableAction.InsertRows(txn[Target], #\"TransformForOutputToDatabaseTableFrom_Sales NCR Walk-In\"), Action.DoNothing}))\r\nin\r\n  #\"WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Sales NCR Walk-In\";\r\nshared #\"TransformForOutputToDatabaseTableFrom_Sales NCR Walk-In\" = let\r\n    ColumnMappings = {[SourceColumnName = \"reporting_day\", DestinationColumnName = \"reporting_day\"], [SourceColumnName = \"Walk-In Sales\", DestinationColumnName = \"Walk-In_Sales\"]},\r\n    SourceColumns = Table.SelectColumns(#\"Sales NCR Walk-In\", List.Transform(ColumnMappings, each _[SourceColumnName])),\r\n    TargetColumns = Table.RenameColumns(SourceColumns, List.Transform(ColumnMappings, each {_[SourceColumnName], _[DestinationColumnName]}))\r\nin\r\n    TargetColumns;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared Category = let\n  Source = Sql.Database(\"greenreb.database.windows.net\", \"NcrAlohaInsights\"),\n  Navigation = Source{[Schema = \"dbo\", Item = \"Category\"]}[Data]\nin\n  Navigation;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WeatherData = let\r\n  Source = Csv.Document(Web.Contents(\"https://greenreb-my.sharepoint.com/personal/techuser_greenreb_com/Documents/Oberhausen%202022-01-19%20to%202023-07-25.csv\"), [Delimiter = \",\", Columns = 4, QuoteStyle = QuoteStyle.None]),\r\n  #\"Promoted headers\" = Table.PromoteHeaders(Source, [PromoteAllScalars = true]),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Promoted headers\", {{\"datetime\", type date}, {\"temp\", type number}, {\"feelslikemax\", type number}, {\"preciptype\", type text}})\r\nin\r\n  #\"Changed column type\";\r\n[Staging = \"DefaultModelStorage\"]\r\nshared #\"Weather_Historical+API\" = let\n    // First Source (API Data)\n    Source_API = Json.Document(Web.Contents(\"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/Oberhausen?unitGroup=metric&key=6CS4R3NSDT3QT6S7FL68KHB9T&contentType=json\")),\n    Navigation_API = Source_API[days],\n    #\"Converted to table_API\" = Table.FromList(Navigation_API, Splitter.SplitByNothing(), null, null, ExtraValues.Error),\n    #\"Expanded Column1_API\" = Table.ExpandRecordColumn(#\"Converted to table_API\", \"Column1\", {\"datetime\", \"temp\", \"preciptype\"}, {\"datetime\", \"temp\", \"preciptype\"}),\n    #\"Expanded preciptype\" = Table.ExpandListColumn(#\"Expanded Column1_API\", \"preciptype\"),\n    #\"Replaced value_API\" = Table.ReplaceValue(#\"Expanded preciptype\", \"\", \"None\", Replacer.ReplaceValue, {\"preciptype\"}),\n    #\"Changed column type_API\" = Table.TransformColumnTypes(#\"Replaced value_API\", {{\"preciptype\", type text}}),\n    #\"Replaced value 1_API\" = Table.ReplaceValue(#\"Changed column type_API\", null, \"None\", Replacer.ReplaceValue, {\"preciptype\"}),\n\n    // Filter rows with null datetime in API data\n    Filtered_API = Table.SelectRows(#\"Replaced value 1_API\", each [datetime] <> null),\n\n    // Second Source (Historical Data)\n    Source_Historical = Csv.Document(Web.Contents(\"https://greenreb-my.sharepoint.com/personal/techuser_greenreb_com/Documents/Oberhausen%202022-01-19%20to%202023-07-25.csv\"), [Delimiter = \",\", Columns = 4, QuoteStyle = QuoteStyle.None]),\n    #\"Promoted headers_Historical\" = Table.PromoteHeaders(Source_Historical, [PromoteAllScalars = true]),\n    #\"Changed column type_Historical\" = Table.TransformColumnTypes(#\"Promoted headers_Historical\", {{\"datetime\", type date}, {\"temp\", type number}, {\"preciptype\", type text}}),\n\n    // Merging the two datasets\n    CombinedData = Table.Combine({Filtered_API, #\"Changed column type_Historical\"}),\n\n    // Sorting by datetime in descending order\n    SortedData = Table.Sort(CombinedData,{{\"datetime\", Order.Descending}}),\n\n    // Removing duplicate rows based on datetime\n    RemovedDuplicates = Table.Distinct(SortedData, {\"datetime\"}),\n\n    // Selecting the desired columns\n    #\"Selected columns\" = Table.SelectColumns(RemovedDuplicates, {\"datetime\", \"temp\", \"preciptype\"}),\r\n  #\"Removed duplicates\" = Table.Distinct(#\"Selected columns\", {\"datetime\"}),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Removed duplicates\", {{\"datetime\", type date}, {\"temp\", type number}}),\r\n  #\"Replaced value\" = Table.ReplaceValue(#\"Changed column type\", \"None\", \"0\", Replacer.ReplaceText, {\"preciptype\"}),\r\n  #\"Replaced value 1\" = Table.ReplaceValue(#\"Replaced value\", \"rain\", \"1\", Replacer.ReplaceText, {\"preciptype\"}),\r\n  #\"Replaced value 2\" = Table.ReplaceValue(#\"Replaced value 1\", \"snow\", \"1\", Replacer.ReplaceText, {\"preciptype\"}),\r\n  #\"Replaced value 3\" = Table.ReplaceValue(#\"Replaced value 2\", \"1,1\", \"1\", Replacer.ReplaceText, {\"preciptype\"}),\r\n  #\"Replaced value 4\" = Table.ReplaceValue(#\"Replaced value 3\", \"1,freezing1\", \"1\", Replacer.ReplaceText, {\"preciptype\"})\nin\n    #\"Replaced value 4\";\r\nshared #\"DestinationForWriteToDatabaseTableFrom_Weather_Historical+API\" = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"d982fe8c-96a8-4194-be02-47865deebfba\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"724f7534-75f9-4f0d-98b7-45e421c2da7f\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Weather_\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[datetime = nullable date, temp = nullable number, preciptype = nullable text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Weather_Historica = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Weather_Historica = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = #\"DestinationForWriteToDatabaseTableFrom_Weather_Historical+API\"], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], #\"TransformForOutputToDatabaseTableFrom_Weather_Historical+API\"), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Weather_Historica;\r\nshared #\"TransformForOutputToDatabaseTableFrom_Weather_Historical+API\" = let\r\n    SourceTable = Table.SelectColumns(#\"Weather_Historical+API\", {\"datetime\", \"temp\", \"preciptype\"})\r\nin\r\n    SourceTable;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared Holidays_2022_2024 = let\r\n  Source = Excel.Workbook(Web.Contents(\"https://greenreb.sharepoint.com/sites/GreenrebExternalShareDrive/Shared%20Documents/General/Greenreb%20Shared%20External%20TI%20Drive/TG%20OB/Reporting/_Reference_Data/Holidays_2022_2024.xlsx\"), null, true),\r\n  #\"Navigation 1\" = Source{[Item = \"Holidays_2022_2024\", Kind = \"Sheet\"]}[Data],\r\n  #\"Promoted headers\" = Table.PromoteHeaders(#\"Navigation 1\", [PromoteAllScalars = true]),\r\n  #\"Changed column type\" = Table.TransformColumnTypes(#\"Promoted headers\", {{\"Date\", type date}, {\"Bezeichnung\", type text}, {\"Wochentag\", type text}, {\"Kalenderwoche\", type text}, {\"Holiday\", type text}}),\r\n  #\"Replaced value\" = Table.ReplaceValue(#\"Changed column type\", \"Yes\", \"1\", Replacer.ReplaceText, {\"Holiday\"})\r\nin\r\n  #\"Replaced value\";\r\nshared DestinationForWriteToDatabaseTableFrom_Holidays_2022_2024 = let\r\n  Pattern = Lakehouse.Contents([]),\r\n  Navigation_1 = Pattern{[workspaceId = \"d982fe8c-96a8-4194-be02-47865deebfba\"]}[Data],\r\n  Navigation_2 = Navigation_1{[lakehouseId = \"724f7534-75f9-4f0d-98b7-45e421c2da7f\"]}[Data],\r\n  TableNavigation = Navigation_2{[Id = \"Holidays_2022_2024\", ItemKind = \"Table\"]}?[Data]?,\r\n  Table = NavigationTable.CreateTableOnDemand(TableNavigation, #table(type table[Date = nullable date, Bezeichnung = nullable text, Wochentag = nullable text, Kalenderwoche = nullable text, Holiday = nullable text], {}), [DeleteWhenEmpty = true])\r\nin\r\n  Table;\r\n[Staging = \"DefaultModelStorage\"]\r\nshared WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Holidays_2022_202 = let\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Holidays_2022_202 = Pipeline.ExecuteAction(ValueAction.WithTransaction([Target = DestinationForWriteToDatabaseTableFrom_Holidays_2022_2024], (txn) => {TableAction.DeleteRows(txn[Target]), TableAction.InsertRows(txn[Target], TransformForOutputToDatabaseTableFrom_Holidays_2022_2024), Action.DoNothing}))\r\nin\r\n  WriteToDatabaseTableFrom_TransformForOutputToDatabaseTableFrom_Holidays_2022_202;\r\nshared TransformForOutputToDatabaseTableFrom_Holidays_2022_2024 = let\r\n    SourceTable = Table.SelectColumns(Holidays_2022_2024, {\"Date\", \"Bezeichnung\", \"Wochentag\", \"Kalenderwoche\", \"Holiday\"})\r\nin\r\n    SourceTable;\r\n","connectionOverrides":[{"path":"https://api.topgolfoberhausen.com/","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://api.topgolfoberhausen.com/\"}","audience":null},{"path":"Lakehouse","kind":"Lakehouse","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Lakehouse\",\"path\":\"Lakehouse\"}","audience":null},{"path":"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/Oberhausen","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://weather.visualcrossing.com/VisualCrossingWebServices/rest/services/timeline/Oberhausen\"}","audience":null},{"path":"greenreb.database.windows.net;NcrAlohaInsights","kind":"SQL","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"ef21126d-eff4-4182-9e35-7ed42b941e7e","audience":null},{"path":"https://greenreb.sharepoint.com/sites/GreenrebExternalShareDrive/Shared%20Documents/General/Greenreb%20Shared%20External%20TI%20Drive/TG%20OB/Reporting/Demand%20Forecast%20Report/ML/Oberhausen%202022-01-19%20to%202023-07-25.csv","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"991f572b-5912-41b6-866f-fdb31ccb8d26","audience":null},{"path":"https://greenreb-my.sharepoint.com/personal/techuser_greenreb_com","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://greenreb-my.sharepoint.com/personal/techuser_greenreb_com\"}","audience":null},{"path":"https://greenreb-my.sharepoint.com/:x:/r/personal/techuser_greenreb_com/_layouts/15/Doc.aspx","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"26c7501c-5b5d-425a-b9f5-6d9f640271ea","audience":null},{"path":"https://greenreb.sharepoint.com/sites/GreenrebExternalShareDrive/Shared%20Documents/General/Greenreb%20Shared%20External%20TI%20Drive/TG%20OB/Reporting/_Reference_Data/Holidays_2022_2024.xlsx","kind":"Web","provider":"CdsA","authenticationKind":null,"environmentName":null,"apiName":null,"connectionName":"{\"kind\":\"Web\",\"path\":\"https://greenreb.sharepoint.com/sites/GreenrebExternalShareDrive/Shared%20Documents/General/Greenreb%20Shared%20External%20TI%20Drive/TG%20OB/Reporting/_Reference_Data/Holidays_2022_2024.xlsx\"}","audience":null}]},"entities":[{"$type":"LocalEntity","name":"Walk-in Visits","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Walk-in%20Visits.parquet"},"annotations":[{"name":"pbi:EntityTypeDisplayHint","value":"CalculatedEntity"},{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"date\"]}]"}],"attributes":[{"name":"date","dataType":"date"},{"name":"Visit_Count","dataType":"decimal"}]},{"$type":"LocalEntity","name":"Manual Walk-In","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Manual%20Walk-In.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[]"}],"attributes":[{"name":"playsite_id","dataType":"int64"},{"name":"date","dataType":"date"},{"name":"visit_type","dataType":"string"},{"name":"visits_count","dataType":"decimal"}]},{"$type":"LocalEntity","name":"OrderMode","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"OrderMode.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"OrderModeId\"]}]"}],"attributes":[{"name":"OrderModeId","dataType":"int64"},{"name":"Owner","dataType":"int64"},{"name":"UserNumber","dataType":"string"},{"name":"Name","dataType":"string"},{"name":"Indicator","dataType":"string"},{"name":"Header","dataType":"string"},{"name":"Trailer","dataType":"string"},{"name":"FKRouting","dataType":"int64"},{"name":"Active","dataType":"string"},{"name":"AllItems","dataType":"string"},{"name":"PromoTaxOverride","dataType":"string"},{"name":"CompTaxOverride","dataType":"string"},{"name":"Include","dataType":"string"},{"name":"Tippable","dataType":"string"},{"name":"Charge","dataType":"double"},{"name":"AddCharge","dataType":"string"},{"name":"Delivery","dataType":"string"},{"name":"FKVrouting","dataType":"int64"},{"name":"NonTaxable","dataType":"string"},{"name":"RoundToNickel","dataType":"string"},{"name":"FKTaxId","dataType":"int64"},{"name":"FKTax2Id","dataType":"int64"},{"name":"FKTaxCategoryId","dataType":"int64"},{"name":"FKItemCategoryId","dataType":"int64"},{"name":"RecordStatus","dataType":"int64"},{"name":"IncludeInIntervalTotal","dataType":"string"},{"name":"StoreAccess","dataType":"int64"},{"name":"ParentAccess","dataType":"int64"},{"name":"OrderMode_PrintName","dataType":"string"},{"name":"PrintPhoneNumber","dataType":"string"},{"name":"PrintShortAddress","dataType":"string"},{"name":"PrintLongAddress","dataType":"string"},{"name":"PrintDirections","dataType":"string"},{"name":"PrintUser1","dataType":"string"},{"name":"PrintUser2","dataType":"string"},{"name":"InfoLocation","dataType":"int64"},{"name":"FKVoucherPrinterId","dataType":"int64"},{"name":"FKOverrideExpediterPrinterId","dataType":"int64"},{"name":"eImporterFileGuid","dataType":"string"},{"name":"FKStoreID","dataType":"int64"}]},{"$type":"LocalEntity","name":"cfgCategoryByStore","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"cfgCategoryByStore.parquet"},"annotations":[{"name":"pbi:EntityTypeDisplayHint","value":"CalculatedEntity"},{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"CategoryId\",\"FKStoreId\"]}]"}],"attributes":[{"name":"CategoryId","dataType":"int64"},{"name":"FKStoreId","dataType":"int64"},{"name":"Name","dataType":"string"},{"name":"StoreCategoryId","dataType":"string"},{"name":"ReportingCategory_1","dataType":"string"},{"name":"Name.1","dataType":"string"},{"name":"ReportingCategory_2","dataType":"string"}]},{"$type":"LocalEntity","name":"Weather_query","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Weather_query.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[]"}],"attributes":[{"name":"datetime","dataType":"string"},{"name":"temp","dataType":"string"},{"name":"preciptype","dataType":"string"}]},{"$type":"LocalEntity","name":"NavigationQuery","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"NavigationQuery.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"workspaceId\"]}]"}],"attributes":[{"name":"workspaceId","dataType":"string"},{"name":"workspaceName","dataType":"string"},{"name":"ItemKind","dataType":"string"},{"name":"ItemName","dataType":"string"},{"name":"IsLeaf","dataType":"string"}]},{"$type":"LocalEntity","name":"dpvHstGndItem","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"dpvHstGndItem.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"UniqueID\"]}]"}],"attributes":[{"name":"UniqueID","dataType":"int64"},{"name":"DateOfBusiness","dataType":"date"},{"name":"FKStoreId","dataType":"int64"},{"name":"FKEmployeeNumber","dataType":"int64"},{"name":"CheckNumber","dataType":"int64"},{"name":"FKItemId","dataType":"int64"},{"name":"FKCategoryId","dataType":"int64"},{"name":"FKOrderModeId","dataType":"int64"},{"name":"FKDayPartId","dataType":"int64"},{"name":"FKRevenueId","dataType":"int64"},{"name":"FKTerminalId","dataType":"int64"},{"name":"Quantity","dataType":"double"},{"name":"SystemDate","dataType":"dateTime"},{"name":"QuantityUnit","dataType":"decimal"},{"name":"TotalPaid","dataType":"decimal"}]},{"$type":"LocalEntity","name":"Sales NCR Walk-In","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Sales%20NCR%20Walk-In.parquet"},"annotations":[{"name":"pbi:EntityTypeDisplayHint","value":"CalculatedEntity"},{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"reporting_day\"]}]"}],"attributes":[{"name":"reporting_day","dataType":"date"},{"name":"Walk-In Sales","dataType":"decimal"}]},{"$type":"LocalEntity","name":"Category","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Category.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[{\"columns\":[\"CategoryId\"]}]"}],"attributes":[{"name":"CategoryId","dataType":"int64"},{"name":"Owner","dataType":"int64"},{"name":"UserNumber","dataType":"int64"},{"name":"Name","dataType":"string"},{"name":"Description","dataType":"string"},{"name":"Parent","dataType":"string"},{"name":"Sales","dataType":"string"},{"name":"Retail","dataType":"string"},{"name":"Suggestive","dataType":"string"},{"name":"Tipshare","dataType":"string"},{"name":"RecordStatus","dataType":"int64"},{"name":"PMSSalesCat","dataType":"int64"},{"name":"ARSalesCat","dataType":"int64"},{"name":"StoreAccess","dataType":"int64"},{"name":"ParentAccess","dataType":"int64"},{"name":"eImporterFileGuid","dataType":"string"},{"name":"FKStoreID","dataType":"int64"}]},{"$type":"LocalEntity","name":"WeatherData","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"WeatherData.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[]"}],"attributes":[{"name":"datetime","dataType":"date"},{"name":"temp","dataType":"decimal"},{"name":"feelslikemax","dataType":"decimal"},{"name":"preciptype","dataType":"string"}]},{"$type":"LocalEntity","name":"Weather_Historical+API","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Weather_Historical%2BAPI.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[]"}],"attributes":[{"name":"datetime","dataType":"date"},{"name":"temp","dataType":"decimal"},{"name":"preciptype","dataType":"string"}]},{"$type":"LocalEntity","name":"Holidays_2022_2024","description":"","pbi:refreshPolicy":{"$type":"FullRefreshPolicy","location":"Holidays_2022_2024.parquet"},"annotations":[{"name":"ppdf:entityKeys","value":"[]"}],"attributes":[{"name":"Date","dataType":"date"},{"name":"Bezeichnung","dataType":"string"},{"name":"Wochentag","dataType":"string"},{"name":"Kalenderwoche","dataType":"string"},{"name":"Holiday","dataType":"string"}]}],"relationships":[{"$type":"SingleKeyRelationship","fromAttribute":{"entityName":"Category","attributeName":"CategoryId"},"toAttribute":{"entityName":"cfgCategoryByStore","attributeName":"CategoryId"}}]}